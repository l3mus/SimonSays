// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2016 13:00:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_vlg_sample_tst(
	block0,
	block1,
	block2,
	block3,
	clk_50,
	newGame,
	sampler_tx
);
input  block0;
input  block1;
input  block2;
input  block3;
input  clk_50;
input  newGame;
output sampler_tx;

reg sample;
time current_time;
always @(block0 or block1 or block2 or block3 or clk_50 or newGame)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_vlg_check_tst (
	blank,
	blue_out,
	clk25_out,
	green_out,
	hs_out,
	red_out,
	sync,
	vs_out,
	sampler_rx
);
input  blank;
input [9:0] blue_out;
input  clk25_out;
input [9:0] green_out;
input  hs_out;
input [9:0] red_out;
input  sync;
input  vs_out;
input sampler_rx;

reg  blank_expected;
reg [9:0] blue_out_expected;
reg  clk25_out_expected;
reg [9:0] green_out_expected;
reg  hs_out_expected;
reg [9:0] red_out_expected;
reg  sync_expected;
reg  vs_out_expected;

reg  blank_prev;
reg [9:0] blue_out_prev;
reg  clk25_out_prev;
reg [9:0] green_out_prev;
reg  hs_out_prev;
reg [9:0] red_out_prev;
reg  sync_prev;
reg  vs_out_prev;

reg  blank_expected_prev;
reg [9:0] blue_out_expected_prev;
reg  clk25_out_expected_prev;
reg [9:0] green_out_expected_prev;
reg  hs_out_expected_prev;
reg [9:0] red_out_expected_prev;
reg  sync_expected_prev;
reg  vs_out_expected_prev;

reg  last_blank_exp;
reg [9:0] last_blue_out_exp;
reg  last_clk25_out_exp;
reg [9:0] last_green_out_exp;
reg  last_hs_out_exp;
reg [9:0] last_red_out_exp;
reg  last_sync_exp;
reg  last_vs_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	blank_prev = blank;
	blue_out_prev = blue_out;
	clk25_out_prev = clk25_out;
	green_out_prev = green_out;
	hs_out_prev = hs_out;
	red_out_prev = red_out;
	sync_prev = sync;
	vs_out_prev = vs_out;
end

// update expected /o prevs

always @(trigger)
begin
	blank_expected_prev = blank_expected;
	blue_out_expected_prev = blue_out_expected;
	clk25_out_expected_prev = clk25_out_expected;
	green_out_expected_prev = green_out_expected;
	hs_out_expected_prev = hs_out_expected;
	red_out_expected_prev = red_out_expected;
	sync_expected_prev = sync_expected;
	vs_out_expected_prev = vs_out_expected;
end



// expected blank
initial
begin
	blank_expected = 1'bX;
end 
// expected blue_out[ 9 ]
initial
begin
	blue_out_expected[9] = 1'bX;
end 
// expected blue_out[ 8 ]
initial
begin
	blue_out_expected[8] = 1'bX;
end 
// expected blue_out[ 7 ]
initial
begin
	blue_out_expected[7] = 1'bX;
end 
// expected blue_out[ 6 ]
initial
begin
	blue_out_expected[6] = 1'bX;
end 
// expected blue_out[ 5 ]
initial
begin
	blue_out_expected[5] = 1'bX;
end 
// expected blue_out[ 4 ]
initial
begin
	blue_out_expected[4] = 1'bX;
end 
// expected blue_out[ 3 ]
initial
begin
	blue_out_expected[3] = 1'bX;
end 
// expected blue_out[ 2 ]
initial
begin
	blue_out_expected[2] = 1'bX;
end 
// expected blue_out[ 1 ]
initial
begin
	blue_out_expected[1] = 1'bX;
end 
// expected blue_out[ 0 ]
initial
begin
	blue_out_expected[0] = 1'bX;
end 

// expected clk25_out
initial
begin
	clk25_out_expected = 1'bX;
end 
// expected green_out[ 9 ]
initial
begin
	green_out_expected[9] = 1'bX;
end 
// expected green_out[ 8 ]
initial
begin
	green_out_expected[8] = 1'bX;
end 
// expected green_out[ 7 ]
initial
begin
	green_out_expected[7] = 1'bX;
end 
// expected green_out[ 6 ]
initial
begin
	green_out_expected[6] = 1'bX;
end 
// expected green_out[ 5 ]
initial
begin
	green_out_expected[5] = 1'bX;
end 
// expected green_out[ 4 ]
initial
begin
	green_out_expected[4] = 1'bX;
end 
// expected green_out[ 3 ]
initial
begin
	green_out_expected[3] = 1'bX;
end 
// expected green_out[ 2 ]
initial
begin
	green_out_expected[2] = 1'bX;
end 
// expected green_out[ 1 ]
initial
begin
	green_out_expected[1] = 1'bX;
end 
// expected green_out[ 0 ]
initial
begin
	green_out_expected[0] = 1'bX;
end 

// expected hs_out
initial
begin
	hs_out_expected = 1'bX;
end 
// expected red_out[ 9 ]
initial
begin
	red_out_expected[9] = 1'bX;
end 
// expected red_out[ 8 ]
initial
begin
	red_out_expected[8] = 1'bX;
end 
// expected red_out[ 7 ]
initial
begin
	red_out_expected[7] = 1'bX;
end 
// expected red_out[ 6 ]
initial
begin
	red_out_expected[6] = 1'bX;
end 
// expected red_out[ 5 ]
initial
begin
	red_out_expected[5] = 1'bX;
end 
// expected red_out[ 4 ]
initial
begin
	red_out_expected[4] = 1'bX;
end 
// expected red_out[ 3 ]
initial
begin
	red_out_expected[3] = 1'bX;
end 
// expected red_out[ 2 ]
initial
begin
	red_out_expected[2] = 1'bX;
end 
// expected red_out[ 1 ]
initial
begin
	red_out_expected[1] = 1'bX;
end 
// expected red_out[ 0 ]
initial
begin
	red_out_expected[0] = 1'bX;
end 

// expected sync
initial
begin
	sync_expected = 1'bX;
end 

// expected vs_out
initial
begin
	vs_out_expected = 1'bX;
end 
// generate trigger
always @(blank_expected or blank or blue_out_expected or blue_out or clk25_out_expected or clk25_out or green_out_expected or green_out or hs_out_expected or hs_out or red_out_expected or red_out or sync_expected or sync or vs_out_expected or vs_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected blank = %b | expected blue_out = %b | expected clk25_out = %b | expected green_out = %b | expected hs_out = %b | expected red_out = %b | expected sync = %b | expected vs_out = %b | ",blank_expected_prev,blue_out_expected_prev,clk25_out_expected_prev,green_out_expected_prev,hs_out_expected_prev,red_out_expected_prev,sync_expected_prev,vs_out_expected_prev);
	$display("| real blank = %b | real blue_out = %b | real clk25_out = %b | real green_out = %b | real hs_out = %b | real red_out = %b | real sync = %b | real vs_out = %b | ",blank_prev,blue_out_prev,clk25_out_prev,green_out_prev,hs_out_prev,red_out_prev,sync_prev,vs_out_prev);
`endif
	if (
		( blank_expected_prev !== 1'bx ) && ( blank_prev !== blank_expected_prev )
		&& ((blank_expected_prev !== last_blank_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blank :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blank_expected_prev);
		$display ("     Real value = %b", blank_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blank_exp = blank_expected_prev;
	end
	if (
		( blue_out_expected_prev[0] !== 1'bx ) && ( blue_out_prev[0] !== blue_out_expected_prev[0] )
		&& ((blue_out_expected_prev[0] !== last_blue_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_out_expected_prev);
		$display ("     Real value = %b", blue_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_blue_out_exp[0] = blue_out_expected_prev[0];
	end
	if (
		( blue_out_expected_prev[1] !== 1'bx ) && ( blue_out_prev[1] !== blue_out_expected_prev[1] )
		&& ((blue_out_expected_prev[1] !== last_blue_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_out_expected_prev);
		$display ("     Real value = %b", blue_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_blue_out_exp[1] = blue_out_expected_prev[1];
	end
	if (
		( blue_out_expected_prev[2] !== 1'bx ) && ( blue_out_prev[2] !== blue_out_expected_prev[2] )
		&& ((blue_out_expected_prev[2] !== last_blue_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_out_expected_prev);
		$display ("     Real value = %b", blue_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_blue_out_exp[2] = blue_out_expected_prev[2];
	end
	if (
		( blue_out_expected_prev[3] !== 1'bx ) && ( blue_out_prev[3] !== blue_out_expected_prev[3] )
		&& ((blue_out_expected_prev[3] !== last_blue_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_out_expected_prev);
		$display ("     Real value = %b", blue_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_blue_out_exp[3] = blue_out_expected_prev[3];
	end
	if (
		( blue_out_expected_prev[4] !== 1'bx ) && ( blue_out_prev[4] !== blue_out_expected_prev[4] )
		&& ((blue_out_expected_prev[4] !== last_blue_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_out_expected_prev);
		$display ("     Real value = %b", blue_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_blue_out_exp[4] = blue_out_expected_prev[4];
	end
	if (
		( blue_out_expected_prev[5] !== 1'bx ) && ( blue_out_prev[5] !== blue_out_expected_prev[5] )
		&& ((blue_out_expected_prev[5] !== last_blue_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_out_expected_prev);
		$display ("     Real value = %b", blue_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_blue_out_exp[5] = blue_out_expected_prev[5];
	end
	if (
		( blue_out_expected_prev[6] !== 1'bx ) && ( blue_out_prev[6] !== blue_out_expected_prev[6] )
		&& ((blue_out_expected_prev[6] !== last_blue_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_out_expected_prev);
		$display ("     Real value = %b", blue_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_blue_out_exp[6] = blue_out_expected_prev[6];
	end
	if (
		( blue_out_expected_prev[7] !== 1'bx ) && ( blue_out_prev[7] !== blue_out_expected_prev[7] )
		&& ((blue_out_expected_prev[7] !== last_blue_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_out_expected_prev);
		$display ("     Real value = %b", blue_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_blue_out_exp[7] = blue_out_expected_prev[7];
	end
	if (
		( blue_out_expected_prev[8] !== 1'bx ) && ( blue_out_prev[8] !== blue_out_expected_prev[8] )
		&& ((blue_out_expected_prev[8] !== last_blue_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_out_expected_prev);
		$display ("     Real value = %b", blue_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_blue_out_exp[8] = blue_out_expected_prev[8];
	end
	if (
		( blue_out_expected_prev[9] !== 1'bx ) && ( blue_out_prev[9] !== blue_out_expected_prev[9] )
		&& ((blue_out_expected_prev[9] !== last_blue_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_out_expected_prev);
		$display ("     Real value = %b", blue_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_blue_out_exp[9] = blue_out_expected_prev[9];
	end
	if (
		( clk25_out_expected_prev !== 1'bx ) && ( clk25_out_prev !== clk25_out_expected_prev )
		&& ((clk25_out_expected_prev !== last_clk25_out_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk25_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk25_out_expected_prev);
		$display ("     Real value = %b", clk25_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_clk25_out_exp = clk25_out_expected_prev;
	end
	if (
		( green_out_expected_prev[0] !== 1'bx ) && ( green_out_prev[0] !== green_out_expected_prev[0] )
		&& ((green_out_expected_prev[0] !== last_green_out_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_out_expected_prev);
		$display ("     Real value = %b", green_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_green_out_exp[0] = green_out_expected_prev[0];
	end
	if (
		( green_out_expected_prev[1] !== 1'bx ) && ( green_out_prev[1] !== green_out_expected_prev[1] )
		&& ((green_out_expected_prev[1] !== last_green_out_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_out_expected_prev);
		$display ("     Real value = %b", green_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_green_out_exp[1] = green_out_expected_prev[1];
	end
	if (
		( green_out_expected_prev[2] !== 1'bx ) && ( green_out_prev[2] !== green_out_expected_prev[2] )
		&& ((green_out_expected_prev[2] !== last_green_out_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_out_expected_prev);
		$display ("     Real value = %b", green_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_green_out_exp[2] = green_out_expected_prev[2];
	end
	if (
		( green_out_expected_prev[3] !== 1'bx ) && ( green_out_prev[3] !== green_out_expected_prev[3] )
		&& ((green_out_expected_prev[3] !== last_green_out_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_out_expected_prev);
		$display ("     Real value = %b", green_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_green_out_exp[3] = green_out_expected_prev[3];
	end
	if (
		( green_out_expected_prev[4] !== 1'bx ) && ( green_out_prev[4] !== green_out_expected_prev[4] )
		&& ((green_out_expected_prev[4] !== last_green_out_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_out_expected_prev);
		$display ("     Real value = %b", green_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_green_out_exp[4] = green_out_expected_prev[4];
	end
	if (
		( green_out_expected_prev[5] !== 1'bx ) && ( green_out_prev[5] !== green_out_expected_prev[5] )
		&& ((green_out_expected_prev[5] !== last_green_out_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_out_expected_prev);
		$display ("     Real value = %b", green_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_green_out_exp[5] = green_out_expected_prev[5];
	end
	if (
		( green_out_expected_prev[6] !== 1'bx ) && ( green_out_prev[6] !== green_out_expected_prev[6] )
		&& ((green_out_expected_prev[6] !== last_green_out_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_out_expected_prev);
		$display ("     Real value = %b", green_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_green_out_exp[6] = green_out_expected_prev[6];
	end
	if (
		( green_out_expected_prev[7] !== 1'bx ) && ( green_out_prev[7] !== green_out_expected_prev[7] )
		&& ((green_out_expected_prev[7] !== last_green_out_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_out_expected_prev);
		$display ("     Real value = %b", green_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_green_out_exp[7] = green_out_expected_prev[7];
	end
	if (
		( green_out_expected_prev[8] !== 1'bx ) && ( green_out_prev[8] !== green_out_expected_prev[8] )
		&& ((green_out_expected_prev[8] !== last_green_out_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_out_expected_prev);
		$display ("     Real value = %b", green_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_green_out_exp[8] = green_out_expected_prev[8];
	end
	if (
		( green_out_expected_prev[9] !== 1'bx ) && ( green_out_prev[9] !== green_out_expected_prev[9] )
		&& ((green_out_expected_prev[9] !== last_green_out_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_out_expected_prev);
		$display ("     Real value = %b", green_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_green_out_exp[9] = green_out_expected_prev[9];
	end
	if (
		( hs_out_expected_prev !== 1'bx ) && ( hs_out_prev !== hs_out_expected_prev )
		&& ((hs_out_expected_prev !== last_hs_out_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hs_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hs_out_expected_prev);
		$display ("     Real value = %b", hs_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hs_out_exp = hs_out_expected_prev;
	end
	if (
		( red_out_expected_prev[0] !== 1'bx ) && ( red_out_prev[0] !== red_out_expected_prev[0] )
		&& ((red_out_expected_prev[0] !== last_red_out_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_out_expected_prev);
		$display ("     Real value = %b", red_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_red_out_exp[0] = red_out_expected_prev[0];
	end
	if (
		( red_out_expected_prev[1] !== 1'bx ) && ( red_out_prev[1] !== red_out_expected_prev[1] )
		&& ((red_out_expected_prev[1] !== last_red_out_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_out_expected_prev);
		$display ("     Real value = %b", red_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_red_out_exp[1] = red_out_expected_prev[1];
	end
	if (
		( red_out_expected_prev[2] !== 1'bx ) && ( red_out_prev[2] !== red_out_expected_prev[2] )
		&& ((red_out_expected_prev[2] !== last_red_out_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_out_expected_prev);
		$display ("     Real value = %b", red_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_red_out_exp[2] = red_out_expected_prev[2];
	end
	if (
		( red_out_expected_prev[3] !== 1'bx ) && ( red_out_prev[3] !== red_out_expected_prev[3] )
		&& ((red_out_expected_prev[3] !== last_red_out_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_out_expected_prev);
		$display ("     Real value = %b", red_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_red_out_exp[3] = red_out_expected_prev[3];
	end
	if (
		( red_out_expected_prev[4] !== 1'bx ) && ( red_out_prev[4] !== red_out_expected_prev[4] )
		&& ((red_out_expected_prev[4] !== last_red_out_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_out_expected_prev);
		$display ("     Real value = %b", red_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_red_out_exp[4] = red_out_expected_prev[4];
	end
	if (
		( red_out_expected_prev[5] !== 1'bx ) && ( red_out_prev[5] !== red_out_expected_prev[5] )
		&& ((red_out_expected_prev[5] !== last_red_out_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_out_expected_prev);
		$display ("     Real value = %b", red_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_red_out_exp[5] = red_out_expected_prev[5];
	end
	if (
		( red_out_expected_prev[6] !== 1'bx ) && ( red_out_prev[6] !== red_out_expected_prev[6] )
		&& ((red_out_expected_prev[6] !== last_red_out_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_out_expected_prev);
		$display ("     Real value = %b", red_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_red_out_exp[6] = red_out_expected_prev[6];
	end
	if (
		( red_out_expected_prev[7] !== 1'bx ) && ( red_out_prev[7] !== red_out_expected_prev[7] )
		&& ((red_out_expected_prev[7] !== last_red_out_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_out_expected_prev);
		$display ("     Real value = %b", red_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_red_out_exp[7] = red_out_expected_prev[7];
	end
	if (
		( red_out_expected_prev[8] !== 1'bx ) && ( red_out_prev[8] !== red_out_expected_prev[8] )
		&& ((red_out_expected_prev[8] !== last_red_out_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_out_expected_prev);
		$display ("     Real value = %b", red_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_red_out_exp[8] = red_out_expected_prev[8];
	end
	if (
		( red_out_expected_prev[9] !== 1'bx ) && ( red_out_prev[9] !== red_out_expected_prev[9] )
		&& ((red_out_expected_prev[9] !== last_red_out_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_out_expected_prev);
		$display ("     Real value = %b", red_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_red_out_exp[9] = red_out_expected_prev[9];
	end
	if (
		( sync_expected_prev !== 1'bx ) && ( sync_prev !== sync_expected_prev )
		&& ((sync_expected_prev !== last_sync_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sync_expected_prev);
		$display ("     Real value = %b", sync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sync_exp = sync_expected_prev;
	end
	if (
		( vs_out_expected_prev !== 1'bx ) && ( vs_out_prev !== vs_out_expected_prev )
		&& ((vs_out_expected_prev !== last_vs_out_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vs_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vs_out_expected_prev);
		$display ("     Real value = %b", vs_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_vs_out_exp = vs_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg block0;
reg block1;
reg block2;
reg block3;
reg clk_50;
reg newGame;
// wires                                               
wire blank;
wire [9:0] blue_out;
wire clk25_out;
wire [9:0] green_out;
wire hs_out;
wire [9:0] red_out;
wire sync;
wire vs_out;

wire sampler;                             

// assign statements (if any)                          
top i1 (
// port map - connection between master ports and signals/registers   
	.blank(blank),
	.block0(block0),
	.block1(block1),
	.block2(block2),
	.block3(block3),
	.blue_out(blue_out),
	.clk25_out(clk25_out),
	.clk_50(clk_50),
	.green_out(green_out),
	.hs_out(hs_out),
	.newGame(newGame),
	.red_out(red_out),
	.sync(sync),
	.vs_out(vs_out)
);

// block0
initial
begin
	block0 = 1'b0;
end 

// block1
initial
begin
	block1 = 1'b0;
end 

// block2
initial
begin
	block2 = 1'b0;
end 

// block3
initial
begin
	block3 = 1'b0;
end 

// clk_50
always
begin
	clk_50 = 1'b0;
	clk_50 = #1 1'b1;
	#1;
end 

// newGame
initial
begin
	newGame = 1'b1;
	newGame = #250000 1'b0;
end 

top_vlg_sample_tst tb_sample (
	.block0(block0),
	.block1(block1),
	.block2(block2),
	.block3(block3),
	.clk_50(clk_50),
	.newGame(newGame),
	.sampler_tx(sampler)
);

top_vlg_check_tst tb_out(
	.blank(blank),
	.blue_out(blue_out),
	.clk25_out(clk25_out),
	.green_out(green_out),
	.hs_out(hs_out),
	.red_out(red_out),
	.sync(sync),
	.vs_out(vs_out),
	.sampler_rx(sampler)
);
endmodule

